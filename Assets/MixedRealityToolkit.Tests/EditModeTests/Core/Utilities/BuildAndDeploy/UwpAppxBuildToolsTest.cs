// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See LICENSE in the project root for license information.

using Microsoft.MixedReality.Toolkit.Build.Editor;
using NUnit.Framework;
using System.Xml.Linq;
using System.Linq;

namespace Microsoft.MixedReality.Toolkit.Tests.Build.Editor
{
    class UwpAppxBuildToolsTest
    {
        // A string version of a sample manifest that gets generated by the Unity build.
        // Used in lieu of an actual file manifest to avoid having to do I/O during tests.
        // Note that the xml declaration must be on the first line, otherwise parsing
        // will fail.
        private const string TestManifest = @"<?xml version='1.0' encoding='utf-8'?>
            <Package xmlns:mp='http://schemas.microsoft.com/appx/2014/phone/manifest'
                     xmlns:uap='http://schemas.microsoft.com/appx/manifest/uap/windows10'
                     xmlns:uap2='http://schemas.microsoft.com/appx/manifest/uap/windows10/2'
                     xmlns:uap3='http://schemas.microsoft.com/appx/manifest/uap/windows10/3'
                     xmlns:uap4='http://schemas.microsoft.com/appx/manifest/uap/windows10/4'
                     xmlns:iot='http://schemas.microsoft.com/appx/manifest/iot/windows10'
                     xmlns:mobile='http://schemas.microsoft.com/appx/manifest/mobile/windows10'
                     IgnorableNamespaces='uap uap2 uap3 uap4 mp mobile iot'
                     xmlns='http://schemas.microsoft.com/appx/manifest/foundation/windows10'>
              <Identity Name='Microsoft.MixedReality.Toolkit' Publisher='CN=Microsoft' Version='2.1.0.0' />
              <mp:PhoneIdentity PhoneProductId='85c8bcd4-fbac-44ed-adf6-bfc01242a27f' PhonePublisherId='00000000-0000-0000-0000-000000000000' />
              <Properties>
                <DisplayName>MixedRealityToolkit</DisplayName>
                <PublisherDisplayName>Microsoft</PublisherDisplayName>
                <Logo>Assets\StoreLogo.png</Logo>
              </Properties>
              <Dependencies>
                <TargetDeviceFamily Name='Windows.Universal' MinVersion='10.0.18362.0' MaxVersionTested='10.0.18362.0' />
              </Dependencies>
              <Resources>
                <Resource Language='x-generate' />
              </Resources>
              <Applications>
                <Application Id='App' Executable='$targetnametoken$.exe' EntryPoint='Microsoft.MixedReality.Toolkit.App'>
                  <uap:VisualElements DisplayName='MixedRealityToolkit' 
                                      Square150x150Logo='Assets\Square150x150Logo.png'
                                      Square44x44Logo='Assets\Square44x44Logo.png'
                                      Description='Microsoft.MixedReality.Toolkit'
                                      BackgroundColor='transparent'>
                    <uap:DefaultTile ShortName='MixedRealityToolkit' Wide310x150Logo='Assets\Wide310x150Logo.png' />
                    <uap:SplashScreen Image='Assets\SplashScreen.png' BackgroundColor='#FFFFFF' />
                    <uap:InitialRotationPreference>
                      <uap:Rotation Preference='landscapeFlipped' />
                    </uap:InitialRotationPreference>
                  </uap:VisualElements>
                </Application>
              </Applications>
              <Capabilities>
                <Capability Name='internetClient' />
                <uap:Capability Name='musicLibrary' />
                <uap2:Capability Name='spatialPerception' />
                <DeviceCapability Name='microphone' />
              </Capabilities>
            </Package>
        "; // end of TestManifest

        /// <summary>
        /// Validates that AddGazeInputCapability will add a gazeInput
        /// capability to an existing well-formed manifest.
        /// </summary>
        [Test]
        public void TestAddGazeInputCapability_CapabilitiesNodeExists()
        {
            XElement rootElement = XElement.Parse(TestManifest);
            UwpAppxBuildTools.AddGazeInputCapability(rootElement);
            AssertSingleGazeInputCapability(rootElement);
        }

        /// <summary>
        /// Validates that the AddGazeInputCapability will also add the
        /// <Capabilities></Capabilities> container tag if it's missing.
        /// </summary>
        [Test]
        public void TestAddGazeInputCapability_CapabilitiesNodeMissing()
        {
            XElement rootElement = XElement.Parse(TestManifest);
            XElement capabilitiesElement = rootElement.Element(rootElement.GetDefaultNamespace() + "Capabilities");
            capabilitiesElement.Remove();

            // Not technically necessary, but sanity checks that we aren't
            // spuriously testing the same thing as
            // TestAddGazeInputCapability_CapabilitiesNodeExists
            Assert.IsNull(rootElement.Element(rootElement.GetDefaultNamespace() + "Capabilities"));

            UwpAppxBuildTools.AddGazeInputCapability(rootElement);

            AssertSingleGazeInputCapability(rootElement);
        }

        /// <summary>
        /// Validates that AddGazeInputCapability will only add the gaze
        /// input capability if it doesn't already exist.
        /// </summary>
        [Test]
        public void TestAddGazeInputCapability_AddsOnce()
        {
            XElement rootElement = XElement.Parse(TestManifest);
            UwpAppxBuildTools.AddGazeInputCapability(rootElement);
            AssertSingleGazeInputCapability(rootElement);

            UwpAppxBuildTools.AddGazeInputCapability(rootElement);
            AssertSingleGazeInputCapability(rootElement);
        }

        private static void AssertSingleGazeInputCapability(XElement rootElement)
        {
            var gazeInputCapabilities = rootElement
                .Descendants(rootElement.GetDefaultNamespace() + "DeviceCapability")
                .Where(element => element.Attribute("Name")?.Value == "gazeInput")
                .ToList();

            Assert.AreEqual(1, gazeInputCapabilities.Count,
                            "There be a single gazeInput capability");
        }
    }
}
